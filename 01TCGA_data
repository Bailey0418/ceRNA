#1.TCGA数据下载,得到RangedSummarizedExperiment（RSE）对象
library(TCGAbiolinks)
projects <- TCGAbiolinks::getGDCprojects()$project_id ##获取癌症名字
projects <- projects[grepl('^TCGA', projects, perl=TRUE)]
projects <- c("TCGA-COAD","TCGA-READ")
#mRNA与lncRNA
sapply(projects, function(project){  
  # 查询
  query <- GDCquery(project = project,
                    data.category = "Transcriptome Profiling",
                    data.type = "Gene Expression Quantification",
                    workflow.type = "STAR - Counts"
                    )
  # 下载
  GDCdownload(query, method = "api", files.per.chunk = 100) #每次下载100个文件
  # 整理
  GDCprepare(query,save = T,save.filename = paste0(project,"_mRNA.rds"))
  }
  )
#临床数据
#unique(getResults(query, cols = "data_type")),确认data.type有几种，需要的话分别下载再合并处理
sapply(projects, function(project){
  query <- GDCquery(project = project,
                    data.category = "Clinical", 
                    data.type = "Clinical Supplement",
                    data.format = "BCR XML")
  GDCdownload(query)
  clinical <- GDCprepare_clinic(query, clinical.info = "patient")
  saveRDS(clinical,file = paste0(project,"_clinical.rds"))
}
)
#miRNA
sapply(projects, function(project){
  query <- GDCquery(project = project,
                    data.category = "Transcriptome Profiling",
                    data.type = "miRNA Expression Quantification"
                    )
  GDCdownload(query)
  GDCprepare(query, save = T,save.filename = paste0(project,"_miRNA.rds")) 
})

#2.整理表达矩阵
library(SummarizedExperiment)
load("/mnt/raid5/User/bailin/project/250725COAD+READ/data/TCGA_COAD_mRNA.Rdata")
assayNames(data)#差异使用unstranded；可视化，机器学习等使用fpkm_uq_unstrand
colnames(rowData(data))
expr <- assay(data, "unstranded")
gene_info <- as.data.frame(rowData(data)[, c("gene_id", "gene_name", "gene_type")])
if (!identical(rownames(expr), rownames(gene_info))) {
  stop("表达矩阵和注释信息的行名不一致！")
}
expr_annotated <- cbind(gene_info, expr)

protein_expr <- expr_annotated[expr_annotated[, "gene_type"] == "protein_coding", -1]
library(dplyr)
protein_expr_aggregated <- protein_expr %>%
  group_by(gene_name) %>%
  summarise(across(where(is.numeric), mean, na.rm = TRUE))
protein_expression <- as.data.frame(protein_expr_aggregated)
rownames(protein_expression) <- protein_expression$gene_name
protein_expression <- protein_expression[, -1]
write.csv(protein_expression,"COAD_protein_count.csv")

miRNA_expr <- expr_annotated[expr_annotated[, "gene_type"] == "miRNA", -1]
write.csv(miRNA_expr,"READ_miRNA_count.csv")

#3.miRNAcount矩阵
load("/mnt/raid5/User/bailin/project/250725COAD+READ/data/TCGA_READ_miRNA.Rdata")
cols <- colnames(data)
miRNA_ID <- data$miRNA_ID
count_cols <- grep("^read_count_", cols, value = TRUE)
sample_ids <- gsub("read_count_", "", count_cols)
count_matrix <- data[, count_cols]
colnames(count_matrix) <- sample_ids
rownames(count_matrix) <- miRNA_ID
count_matrix_df <- as.data.frame(count_matrix)
head(count_matrix_df)
write.csv(count_matrix_df,"/mnt/raid5/User/bailin/project/250725COAD+READ/result/count+DEG/READ_miRNA_count.csv")

#4.多癌症表达谱整合去批次+差异表达分析
COAD_expr <- read.csv("/mnt/raid5/User/bailin/Project/250725COAD+READ/result/01count+DEG/COAD_miRNA_count.csv",row.names = 1)
READ_expr <- read.csv("/mnt/raid5/User/bailin/Project/250725COAD+READ/result/01count+DEG/READ_miRNA_count.csv",row.names = 1)
library(DESeq2)
library(tidyverse)

common_genes <- intersect(rownames(COAD_expr), rownames(READ_expr))
combined_expr <- cbind(
  COAD_expr[common_genes, ], 
  READ_expr[common_genes, ])

metadata <- data.frame(
  sampleID = colnames(combined_expr),
  # 根据数据来源确定癌症类型
  cancerType = c(
    rep("COAD", ncol(COAD_expr)),  # 来自COAD_expr的样本
    rep("READ", ncol(READ_expr))   # 来自READ_expr的样本
  ),
  # 根据TCGA barcode确定样本类型
  sampleType = ifelse(
    substr(colnames(combined_expr), 14, 15) == "01", 
    "Tumor", 
    ifelse(
      substr(colnames(combined_expr), 14, 15) == "11",
      "Normal",
      "Control"  # 其他类型（如细胞系）
    )
  ),
  row.names = colnames(combined_expr)  # 设置行名为样本ID
)
#检查样本分布
sample_distribution <- table(metadata$cancerType, metadata$sampleType)
print(sample_distribution)
# 保留肿瘤和正常样本
valid_samples <- metadata %>% 
  filter(sampleType %in% c("Tumor", "Normal")) %>%
  rownames()
combined_expr <- combined_expr[, valid_samples]
metadata <- metadata[valid_samples, ]
#error:Error in DESeqDataSet(se, design = design, ignoreRank) : 
#  some values in assay are not integers
#any(combined_expr %% 1 != 0)  # 如果有TRUE值表示有小数
# 转换为整数
#combined_expr_int <- apply(combined_expr, 2, function(x) as.integer(round(x)))
#rownames(combined_expr_int) <- rownames(combined_expr)

expr_before <- combined_expr
pca_before <- PCA(t(expr_before), graph = FALSE)
p1 <- fviz_pca_ind(pca_before, 
             geom.ind = "point",
             col.ind = metadata$cancerType, # 按癌症类型着色
             legend.title = "Cancer Type") +
  ggtitle("PCA Before Batch Correction")
ggsave("PCA Before Batch Correction.pdf",plot = p1,width = 6,height = 6)

#去批次
library(limma)
batch <- metadata$cancerType  # 或者你有更细致的batch信息
expr_corrected <- removeBatchEffect(expr_before, batch = batch)
pca_after <- PCA(t(expr_corrected), graph = FALSE)
fviz_pca_ind(pca_after, 
             geom.ind = "point",
             col.ind = metadata$cancerType,
             legend.title = "Cancer Type") +
  ggtitle("PCA After Batch Correction")
ggsave("PCA After Batch Correction.pdf",plot = p1,width = 6,height = 6)
write.csv(combined_expr_int,"/mnt/raid5/User/bailin/project/250725COAD+READ/result/count+DEG/CRC_miRNA.csv")

#差异表达分析
dds <- DESeqDataSetFromMatrix(
  countData = combined_expr_int,
  colData = metadata,
  design = ~ cancerType + sampleType  # 校正癌症类型差异
)
#过滤低表达基因（保留在至少10%样本中表达量≥10的基因）
min_samples <- ceiling(0.1 * ncol(dds))  # 计算最小样本数
keep <- rowSums(counts(dds) >= 10) >= min_samples#miRNA表达量较低，这个阈值改为5（或更小）
dds <- dds[keep, ]
#差异表达分析
dds <- DESeq(dds)
#error：Error in estimateSizeFactorsForMatrix(counts(object), locfunc = locfunc,  : 
  every gene contains at least one zero, cannot compute log geometric means
dds <- estimateSizeFactors(dds, type = "poscounts")  # 用正计数估计标准化因子
dds <- DESeq(dds, sfType = "poscounts")  # 显式指定 size factor 类型
#获取肿瘤vs正常结果
results <- results(
  dds, 
  contrast = c("sampleType", "Tumor", "Normal"),
  alpha = 0.05,
  lfcThreshold = 1  # 设置最小log2FC阈值
)
sig_results <- as.data.frame(results) %>%
  mutate(gene = rownames(.)) %>%
  filter(pvalue < 0.05 & !is.na(pvalue)) %>%
  arrange(pvalue, desc(abs(log2FoldChange)))
write.csv(sig_results, "CRC_Tumor_vs_Normal_DEGs.csv", row.names = FALSE)
saveRDS(dds, "CRC_DESeq2_object.rds")
